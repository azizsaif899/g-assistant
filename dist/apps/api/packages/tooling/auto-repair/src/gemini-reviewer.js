#!/usr/bin/env node
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.GeminiReviewer = void 0;
const tslib_1 = require("tslib");
const generative_ai_1 = require("@google/generative-ai");
const fs = tslib_1.__importStar(require("fs"));
const path = tslib_1.__importStar(require("path"));
class GeminiReviewer {
    constructor(isDryRun = false) {
        const apiKey = process.env.GEMINI_API_KEY;
        if (!apiKey)
            throw new Error('GEMINI_API_KEY required');
        this.genAI = new generative_ai_1.GoogleGenerativeAI(apiKey);
        this.model = this.genAI.getGenerativeModel({ model: 'gemini-pro' });
        this.projectRoot = path.resolve(__dirname, '../../');
        this.isDryRun = isDryRun;
    }
    // ูุฑุงุฌุนุฉ ุงููุดุฑูุน ูุงููุงู
    async reviewProject() {
        console.log('๐ ูุฑุงุฌุนุฉ ุงููุดุฑูุน ูุงููุงู...');
        const reports = this.loadAllReports();
        const monthlyPlan = this.loadMonthlyPlan();
        const dashboard = this.loadDashboardData();
        const fixLogs = this.loadFixLogs();
        if (this.isDryRun) {
            console.log('[DRY RUN] ูุญุงูุงุฉ ูุฑุงุฌุนุฉ ุงููุดุฑูุน ุจูุงุณุทุฉ Gemini.');
            return {
                projectHealth: 'HEALTHY',
                priorities: [
                    {
                        priority: 'HIGH',
                        task: 'ูููุฉ ูุญุงูุงุฉ ุฐุงุช ุฃููููุฉ ุนุงููุฉ',
                        location: 'apps/some-app/src/main.ts',
                        action: 'FIX',
                        estimatedTime: '30m',
                        reason: 'ุชู ุฅูุดุงุคูุง ูู ูุถุน ุงููุญุงูุงุฉ'
                    }
                ],
                dailyTasks: ['ุชูููุฐ ูููุฉ ุงููุญุงูุงุฉ', 'ุงูุชุญูู ูู ุชูุฑูุฑ ุงููุญุงูุงุฉ'],
                recommendations: ['ุชุดุบูู ุงููุธุงู ูู ุงููุถุน ุงููุนูู ุจุนุฏ ุงูุชุญูู ูู ุงููุญุงูุงุฉ']
            };
        }
        const prompt = this.buildReviewPrompt(reports, monthlyPlan, dashboard, fixLogs);
        const result = await this.model.generateContent(prompt);
        return this.parseReviewResult(result.response.text());
    }
    // ุชุญููู ุจููุฉ ุงููุดุฑูุน
    analyzeProjectStructure() {
        const structure = {
            apps: this.scanDirectory('apps'),
            packages: this.scanDirectory('packages'),
            docs: this.scanDirectory('docs'),
            scripts: this.scanDirectory('scripts')
        };
        return structure;
    }
    // ูุณุญ ูุฌูุฏ
    scanDirectory(dirName) {
        const dirPath = path.join(this.projectRoot, dirName);
        if (!fs.existsSync(dirPath))
            return [];
        return fs.readdirSync(dirPath, { withFileTypes: true })
            .map(dirent => ({
            name: dirent.name,
            type: dirent.isDirectory() ? 'folder' : 'file',
            path: path.join(dirName, dirent.name)
        }));
    }
    // ุชุญููู ุฌููุน ุงูุชูุงุฑูุฑ
    loadAllReports() {
        const reportsDir = path.join(this.projectRoot, 'docs/6_fixing/reports');
        const reports = {};
        if (fs.existsSync(reportsDir)) {
            fs.readdirSync(reportsDir)
                .filter(file => file.endsWith('.json'))
                .forEach(file => {
                try {
                    const content = fs.readFileSync(path.join(reportsDir, file), 'utf8');
                    reports[file] = JSON.parse(content);
                }
                catch (error) {
                    // Log the actual error for better debugging
                    console.error(`Could not read or parse report file: ${file}`, error);
                }
            });
        }
        return reports;
    }
    // ุชุญููู ุงูุฎุทุฉ ุงูุดูุฑูุฉ
    loadMonthlyPlan() {
        const planPath = path.join(this.projectRoot, 'docs/6_fixing/monthly_plans/MONTHLY_PLAN.md');
        if (fs.existsSync(planPath)) {
            return fs.readFileSync(planPath, 'utf8');
        }
        return 'ูุง ุชูุฌุฏ ุฎุทุฉ ุดูุฑูุฉ';
    }
    // ุชุญููู ุจูุงูุงุช ููุญุฉ ุงูุชุญูู
    loadDashboardData() {
        const dashboardPath = path.join(this.projectRoot, 'docs/6_fixing/reports/central_dashboard.json');
        if (fs.existsSync(dashboardPath)) {
            try {
                const content = fs.readFileSync(dashboardPath, 'utf8');
                return JSON.parse(content);
            }
            catch (error) {
                // Log the actual error for better debugging
                console.error(`Could not read or parse central_dashboard.json`, error);
                return null;
            }
        }
        return null;
    }
    // ุชุญููู ุณุฌูุงุช ุงูุฅุตูุงุญ
    loadFixLogs() {
        const logDir = path.join(this.projectRoot, 'docs/6_fixing/logs');
        if (fs.existsSync(logDir)) {
            // ููุงุญุธุฉ: ูุฐุง ุชุจุณูุท. ูููู ุชูุณูุน ูุฐุง ุงูุฌุฒุก ููุฑุงุกุฉ ูุชุญููู ุงูุณุฌูุงุช ุจุดูู ุฃุนูู.
            return "ุชู ุงูุนุซูุฑ ุนูู ุณุฌูุงุช ุงูุฅุตูุงุญ. ูุฌุจ ูุฑุงุฌุนุชูุง ูุชุฌูุจ ุชูุฑุงุฑ ุงูููุงู ุงูููุชููุฉ ุฃู ุงููุงุดูุฉ.";
        }
        return "ูู ูุชู ุงูุนุซูุฑ ุนูู ูุฌูุฏ ุงูุณุฌูุงุช.";
    }
    // ุงุณุชุฎูุงุต ุงูุฃุฎุทุงุก ุงูุญุฑุฌุฉ ูู ุงูุชูุงุฑูุฑ
    extractCriticalErrors(reports) {
        const errors = [];
        Object.values(reports).forEach((report) => {
            if (report.priorities) {
                const critical = report.priorities.filter(p => p.priority === 'HIGH' || p.priority === 'CRITICAL');
                errors.push(...critical);
            }
        });
        return errors;
    }
    // ุงุณุชุฎูุงุต ุงูููุงู ูู ุงูุฎุทุฉ ุงูุดูุฑูุฉ
    extractMonthlyTasks(monthlyPlan) {
        const tasks = monthlyPlan.split('\n')
            .filter(line => line.trim().startsWith('- [ ]') || line.trim().startsWith('*'))
            .map(line => line.replace(/(- \[[ \]]|\*)/, '').trim());
        return tasks.map(task => ({ task, source: 'MONTHLY_PLAN.md' }));
    }
    // ุจูุงุก prompt ุงููุฑุงุฌุนุฉ
    buildReviewPrompt(reports, monthlyPlan, dashboard, fixLogs) {
        const criticalErrors = this.extractCriticalErrors(reports);
        const monthlyTasks = this.extractMonthlyTasks(monthlyPlan);
        return `
ุฃูุช Gemini AIุ ุงููุฑุงุฌุน ุงูุฐูู ูู ูุธุงู G-Assistant NX.
ูููุชู ูู ุชุญููู ุงููุฏุฎูุงุช ุงูุชุงููุฉ ูุชุญุฏูุฏ ุงูุฃููููุงุช ูุงูููุงู ุงูููููุฉ ูููููุฐ (Executor).
ูุฌุจ ุฃู ุชููู ุงูููุงู ุฏูููุฉ ููุงุจูุฉ ููุชูููุฐ ููููุง ูุจุฑูุชูููู ุงููููุฐ ุงูุตุงุฑู (AI_Amazon_Executor_v2.md) ุงูุฐู ูููุนู ูู ุงูุชูููุฑ ุฃู ุงูุชุฎุทูุท.

ุงููุฏุฎูุงุช ุงูุฃุณุงุณูุฉ ูุชุญุฏูุฏ ุงูุฃููููุงุช:

1. ุงูุฎุทุฉ ุงูุดูุฑูุฉ (ุงูุฃูุฏุงู ุงูุงุณุชุฑุงุชูุฌูุฉ):
${JSON.stringify(monthlyTasks, null, 2)}

2. ููุญุฉ ุงูุชุญูู ุงููุฑูุฒูุฉ (ุงูุญุงูุฉ ุงูุญุงููุฉ ูุงูููุงู ุงููุนููุฉ):
${JSON.stringify(dashboard, null, 2)}

3. ุงูุชูุงุฑูุฑ ูุงูุฃุฎุทุงุก ุงูููุชุดูุฉ (ุงูุฃุฎุทุงุก ุงูุญุฑุฌุฉ):
${JSON.stringify(criticalErrors, null, 2)}

4. ุณุฌูุงุช ุงูุฅุตูุงุญ (ูุชุฌูุจ ุงูุชูุฑุงุฑ):
${fixLogs}

ุงููุทููุจ:
1. ุชุญููู ุดุงูู ูููุฏุฎูุงุช ูุชุญุฏูุฏ ุตุญุฉ ุงููุดุฑูุน.
2. ุฅูุดุงุก ูุงุฆูุฉ ููุงู ุฐุงุช ุฃููููุฉ (priorities) ูููููุฐุ ูุน ุชุญุฏูุฏ ุงูุฅุฌุฑุงุก (FIX, UPDATE, DELETE) ูุงููููุน ุจุฏูุฉ.
3. ุงูุชุฑุงุญ ูุงุฆูุฉ ููุงู ููููุฉ (dailyTasks) ูุงุถุญุฉ ูููุฌุฒุฉ.
4. ุชูุฏูู ุชูุตูุงุช ุนุงูุฉ ูุชุญุณูู ุงููุธุงู.

ุฃุฌุจ ุจู JSON:
{
  "projectHealth": "HEALTHY|WARNING|CRITICAL",
  "priorities": [
    {
      "priority": "HIGH|MEDIUM|LOW",
      "task": "ูุตู ุงููููุฉ",
      "location": "ูุณุงุฑ ุงูููู",
      "action": "FIX|UPDATE|DELETE",
      "estimatedTime": "ุงูููุช ุงูููุฏุฑ",
      "reason": "ุณุจุจ ุงูุฃููููุฉ"
    }
  ],
  "dailyTasks": ["ูููุฉ 1", "ูููุฉ 2"],
  "recommendations": ["ุชูุตูุฉ 1", "ุชูุตูุฉ 2"]
}
`;
    }
    // ุชุญููู ูุชูุฌุฉ ุงููุฑุงุฌุนุฉ
    parseReviewResult(response) {
        try {
            const jsonMatch = response.match(/```json\s*([\s\S]*?)\s*```/);
            if (jsonMatch) {
                return JSON.parse(jsonMatch[1]);
            }
            // ูุญุงููุฉ ุชุญููู ูุจุงุดุฑ
            return JSON.parse(response);
        }
        catch (error) {
            console.error('Failed to parse Gemini response. Response was:', response);
            return {
                projectHealth: 'WARNING',
                priorities: [],
                dailyTasks: ['ูุฑุงุฌุนุฉ ูุฏููุฉ ูุทููุจุฉ'],
                // Be more specific in the recommendation
                recommendations: ['Gemini response was not valid JSON. Manual check required.']
            };
        }
    }
    // ุญูุธ ุชูุฑูุฑ ุงููุฑุงุฌุนุฉ
    async saveReviewReport(review) {
        const timestamp = new Date().toISOString().split('T')[0];
        const reportPath = path.join(this.projectRoot, 'docs/6_fixing/reports', `gemini_review_${timestamp}.json`);
        const fullReport = {
            timestamp: new Date().toISOString(),
            reviewer: 'Gemini AI Reviewer',
            version: '2.0',
            ...review
        };
        fs.writeFileSync(reportPath, JSON.stringify(fullReport, null, 2));
        // ุฅูุดุงุก ููู ุงูููุงู ุงูููููุฉ
        await this.createDailyTasksFile(review.dailyTasks || []);
        console.log(`๐ ุชู ุญูุธ ุชูุฑูุฑ ุงููุฑุงุฌุนุฉ: ${reportPath}`);
        return reportPath;
    }
    // ุฅูุดุงุก ููู ุงูููุงู ุงูููููุฉ
    async createDailyTasksFile(tasks) {
        const timestamp = new Date().toISOString().split('T')[0];
        // ุชุญุฏูุซ DAILY_BOOT.md
        await this.updateDailyBoot(tasks);
        // ุฅูุดุงุก ุชูุฑูุฑ ุฅุถุงูู
        const tasksPath = path.join(this.projectRoot, 'docs/6_fixing/reports', `daily_tasks_${timestamp}.md`);
        const content = `# ๐ ุงูููุงู ุงูููููุฉ - ${timestamp}

## ๐ฏ ุงูููุงู ุงููุทููุจุฉ:

${tasks.map((task, index) => `${index + 1}. ${task}`).join('\n')}

## โ ุญุงูุฉ ุงูุชูููุฐ:
- [ ] ูุฑุงุฌุนุฉ ุงูุชูุฑูุฑ ุงูุดุงูู
- [ ] ุชูููุฐ ุงูููุงู ุญุณุจ ุงูุฃููููุฉ
- [ ] ุชุญุฏูุซ ุงูุชูุงุฑูุฑ

---
ุชู ุฅูุดุงุคู ุจูุงุณุทุฉ: Gemini AI Reviewer
`;
        fs.writeFileSync(tasksPath, content);
        console.log(`๐ ุชู ุฅูุดุงุก ููู ุงูููุงู ุงูููููุฉ: ${tasksPath}`);
    }
    // ุชุญุฏูุซ DAILY_BOOT.md
    async updateDailyBoot(tasks) {
        const timestamp = new Date().toISOString().split('T')[0];
        const bootPath = path.join(this.projectRoot, 'docs/6_fixing/DAILY_BOOT.md');
        const reports = this.loadAllReports();
        const errorSources = this.analyzeErrorSources(reports);
        const content = `# ๐ Daily Boot - ${timestamp}

## ๐ Today's Mission: G-Assistant NX Execution

**Main Goal**: Execute tasks from Gemini AI Reviewer

## ๐ฏ Priority Tasks

${this.formatTasksForBoot(tasks, errorSources)}

## ๐ Error Sources Analysis

${this.formatErrorSources(errorSources)}

## ๐ Status Updates

- **Gemini Review**: โ Completed
- **Amazon Executor**: โณ Ready to execute

---
*Generated by Gemini AI Reviewer at ${new Date().toLocaleString('ar-SA')}*`;
        fs.writeFileSync(bootPath, content);
        console.log(`๐ ุชู ุชุญุฏูุซ DAILY_BOOT.md`);
    }
    // ุชุญููู ูุตุงุฏุฑ ุงูุฃุฎุทุงุก
    analyzeErrorSources(reports) {
        const sources = {};
        Object.entries(reports).forEach(([filename, report]) => {
            if (report.errors && Array.isArray(report.errors)) {
                report.errors.forEach((error) => {
                    const source = this.identifyErrorSource(error, filename);
                    if (!sources[source])
                        sources[source] = [];
                    sources[source].push({
                        file: error.file || 'unknown',
                        message: error.message,
                        severity: error.severity,
                        reportFile: filename
                    });
                });
            }
        });
        return sources;
    }
    // ุชุญุฏูุฏ ูุตุฏุฑ ุงูุฎุทุฃ
    identifyErrorSource(error, reportFile) {
        if (reportFile.includes('nx_monitor'))
            return 'nx_project_monitor.js';
        if (reportFile.includes('auto_fix'))
            return 'nx_auto_fix.js';
        if (reportFile.includes('detected_errors'))
            return 'detector.ts';
        if (error.source === 'build')
            return 'nx build system';
        return 'unknown script';
    }
    // ุชูุณูู ุงูููุงู
    formatTasksForBoot(tasks, errorSources) {
        return tasks.map((task, index) => `- [ ] **TASK-${index + 1}**: ${task}`).join('\n') || '- [ ] No tasks';
    }
    // ุชูุณูู ูุตุงุฏุฑ ุงูุฃุฎุทุงุก
    formatErrorSources(sources) {
        let formatted = '';
        Object.entries(sources).forEach(([source, errors]) => {
            formatted += `\n### ๐ ${source}: ${errors.length} errors\n`;
        });
        return formatted || 'No error sources';
    }
}
exports.GeminiReviewer = GeminiReviewer;
// ุชุดุบูู ูุจุงุดุฑ
if (require.main === module) {
    const reviewer = new GeminiReviewer();
    reviewer.reviewProject().then(review => {
        reviewer.saveReviewReport(review);
        console.log('๐ ุชูุช ุงููุฑุงุฌุนุฉ ุงูุดุงููุฉ');
    });
}
//# sourceMappingURL=gemini-reviewer.js.map