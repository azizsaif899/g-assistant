// ŸÜÿ∏ÿßŸÖ ÿßŸÑÿ™ŸáŸäÿ¶ÿ© ÿßŸÑŸÖÿ≠ÿ≥ŸÜ - Ÿäÿ≥ÿ™ÿÆÿØŸÖ ÿßŸÑÿ™ÿ±ÿ™Ÿäÿ® ÿßŸÑÿ∑Ÿàÿ®ŸàŸÑŸàÿ¨Ÿä
(function(global) {
  function initializeSystem() {
    try {
      Logger.log('üöÄ G-Assistant Enhanced Initializer starting...');
      
      if (!global.GAssistant?.Utils?.Injector) {
        throw new Error('Core system not loaded');
      }
      
      const injector = global.GAssistant.Utils.Injector;
      
      // ÿ®ŸÜÿßÿ° ÿ¨ŸÖŸäÿπ ÿßŸÑŸàÿ≠ÿØÿßÿ™ ÿ®ÿßŸÑÿ™ÿ±ÿ™Ÿäÿ® ÿßŸÑÿµÿ≠Ÿäÿ≠
      injector.buildAllModules();
      
      // ÿ™ŸáŸäÿ¶ÿ© ÿßŸÑŸàÿ≠ÿØÿßÿ™ ÿßŸÑÿ™Ÿä ÿ™ÿ≠ÿ™ÿßÿ¨ init
      let initialized = 0;
      Object.keys(injector._moduleExports).forEach(name => {
        const moduleExports = injector._moduleExports[name];
        if (moduleExports && typeof moduleExports.init === 'function' && !moduleExports._isFallback) {
          try {
            moduleExports.init();
            initialized++;
          } catch (e) {
            Logger.log(`‚ùå Error initializing ${name}: ${e.message}`);
          }
        }
      });
      
      Logger.log(`üîß Initialized ${initialized} modules`);
      
      // ÿ™ÿ¥ÿ∫ŸäŸÑ ŸÅÿ≠ÿµ ÿßŸÑÿµÿ≠ÿ©
      if (global.GAssistant.System?.HealthCheck?.runHealthCheckAndSave) {
        const healthReport = global.GAssistant.System.HealthCheck.runHealthCheckAndSave();
        Logger.log(`üìä System health: ${healthReport.systemStatus}`);
      }
      
      Logger.log('‚úÖ G-Assistant system initialized successfully!');
      return true;
      
    } catch (e) {
      Logger.log(`‚ùå Initialization failed: ${e.message}`);
      return false;
    }
  }

  global.initializeGAssistantSystem = initializeSystem;
  
  // ÿ™ÿ¥ÿ∫ŸäŸÑ ÿßŸÑÿ™ŸáŸäÿ¶ÿ©
  setTimeout(() => {
    initializeSystem();
  }, 100);
})(this);

// ÿØŸàÿßŸÑ ŸÑŸÑÿßÿÆÿ™ÿ®ÿßÿ±
function initializeSystem() {
  return initializeGAssistantSystem();
}

function debugModules() {
  const injector = GAssistant?.Utils?.Injector;
  if (!injector) {
    Logger.log('‚ùå Injector not available');
    return;
  }
  
  const factories = Object.keys(injector._moduleFactories);
  const exports = Object.keys(injector._moduleExports);
  const fallbacks = exports.filter(name => injector._moduleExports[name]?._isFallback);
  
  Logger.log(`üì¶ Registered: ${factories.length}, Built: ${exports.length}, Fallbacks: ${fallbacks.length}`);
  
  if (fallbacks.length > 0) {
    Logger.log(`‚ö†Ô∏è Fallback modules: ${fallbacks.join(', ')}`);
  }
  
  return { factories: factories.length, exports: exports.length, fallbacks: fallbacks.length };
}