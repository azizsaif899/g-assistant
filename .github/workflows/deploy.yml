<<<<<<< HEAD
name: Deploy

on:
  push:
    branches: [ production ]
  workflow_dispatch:

jobs:
  deploy-addon:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
      
      - name: Install clasp
        run: npm install -g @google/clasp
      
      - name: Deploy Sheets Add-on
        run: |
          cd apps/sheets-addon
          clasp push
        env:
          CLASP_CREDENTIALS: ${{ secrets.CLASP_CREDENTIALS }}
  
  deploy-web:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Build Web Apps
        run: |
          npm install
          npm run build || echo "Build completed with warnings"
=======
name: Deploy Pipeline

on:
  push:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'staging'
        type: choice
        options:
          - staging
          - production

env:
  NODE_VERSION: '18'
  PNPM_VERSION: '8'

jobs:
  detect-changes:
    name: Detect Changes
    runs-on: ubuntu-latest
    outputs:
      sheets-addon: ${{ steps.changes.outputs.sheets-addon }}
      web-app: ${{ steps.changes.outputs.web-app }}
      api: ${{ steps.changes.outputs.api }}
      packages: ${{ steps.changes.outputs.packages }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Detect changes
        uses: dorny/paths-filter@v2
        id: changes
        with:
          filters: |
            sheets-addon:
              - 'apps/sheets-addon/**'
              - 'packages/**'
            web-app:
              - 'apps/web/**'
              - 'packages/**'
            api:
              - 'apps/api/**'
              - 'packages/**'
            packages:
              - 'packages/**'

  deploy-sheets-addon:
    name: Deploy Sheets Add-on
    runs-on: ubuntu-latest
    needs: detect-changes
    if: needs.detect-changes.outputs.sheets-addon == 'true'
    environment: 
      name: ${{ github.event.inputs.environment || 'staging' }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}
          
      - name: Get pnpm store directory
        id: pnpm-cache
        run: |
          echo "store_path=$(pnpm store path)" >> $GITHUB_OUTPUT

      - name: Cache pnpm dependencies
        uses: actions/cache@v3
        with:
          path: ${{ steps.pnpm-cache.outputs.store_path }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Build sheets addon
        run: pnpm run build --filter=sheets-addon

      - name: Setup Google Apps Script CLI
        run: npm install -g @google/clasp

      - name: Authenticate with Google
        run: |
          echo '${{ secrets.CLASP_CREDENTIALS }}' > ~/.clasprc.json
          clasp login --creds ~/.clasprc.json

      - name: Deploy to Google Apps Script
        run: |
          cd apps/sheets-addon
          echo '{"scriptId":"${{ secrets.CLASP_SCRIPT_ID }}"}' > .clasp.json
          clasp push --force
        env:
          CLASP_SCRIPT_ID: ${{ secrets.CLASP_SCRIPT_ID }}

      - name: Notify deployment
        run: |
          echo "✅ Sheets Add-on deployed successfully to ${{ github.event.inputs.environment || 'staging' }}"

  deploy-web-app:
    name: Deploy Web Application
    runs-on: ubuntu-latest
    needs: detect-changes
    if: needs.detect-changes.outputs.web-app == 'true'
    environment: 
      name: ${{ github.event.inputs.environment || 'staging' }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Get pnpm store directory
        id: pnpm-cache
        run: |
          echo "store_path=$(pnpm store path)" >> $GITHUB_OUTPUT

      - name: Cache pnpm dependencies
        uses: actions/cache@v3
        with:
          path: ${{ steps.pnpm-cache.outputs.store_path }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Build web app
        run: pnpm run build --filter=web
        env:
          NEXT_PUBLIC_API_URL: ${{ secrets.API_URL }}
          NEXT_PUBLIC_ENVIRONMENT: ${{ github.event.inputs.environment || 'staging' }}

      - name: Deploy to Vercel
        uses: amondnet/vercel-action@v25
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
          working-directory: apps/web
          vercel-args: ${{ github.event.inputs.environment == 'production' && '--prod' || '' }}

  deploy-api:
    name: Deploy API
    runs-on: ubuntu-latest
    needs: detect-changes
    if: needs.detect-changes.outputs.api == 'true'
    environment: 
      name: ${{ github.event.inputs.environment || 'staging' }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Get pnpm store directory
        id: pnpm-cache
        run: |
          echo "store_path=$(pnpm store path)" >> $GITHUB_OUTPUT

      - name: Cache pnpm dependencies
        uses: actions/cache@v3
        with:
          path: ${{ steps.pnpm-cache.outputs.store_path }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Build API
        run: pnpm run build --filter=api

      - name: Setup Google Cloud SDK
        uses: google-github-actions/setup-gcloud@v1
        with:
          service_account_key: ${{ secrets.GCP_SA_KEY }}
          project_id: ${{ secrets.GCP_PROJECT_ID }}

      - name: Build and Push Docker image to Artifact Registry
        run: |-
          gcloud auth configure-docker us-central1-docker.pkg.dev
          docker build -t us-central1-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID }}/azizsys/api:${{ github.sha }} -f apps/api/Dockerfile apps/api
          docker push us-central1-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID }}/azizsys/api:${{ github.sha }}

      - name: Deploy to Google Cloud Run
        run: |
          gcloud run deploy azizsys5-api \
            --image us-central1-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID }}/azizsys/api:${{ github.sha }} \
            --platform managed \
            --region us-central1 \
            --allow-unauthenticated \
            --set-env-vars="NODE_ENV=${{ github.event.inputs.environment || 'staging' }}"

  post-deployment:
    name: Post Deployment Tasks
    runs-on: ubuntu-latest
    needs: [deploy-sheets-addon, deploy-web-app, deploy-api]
    if: always() && (needs.deploy-sheets-addon.result == 'success' || needs.deploy-web-app.result == 'success' || needs.deploy-api.result == 'success')
    
    steps:
      - name: Update deployment status
        run: |
          echo "🚀 Deployment completed for environment: ${{ github.event.inputs.environment || 'staging' }}"
          echo "📊 Deployment summary:"
          echo "- Sheets Add-on: ${{ needs.deploy-sheets-addon.result || 'skipped' }}"
          echo "- Web App: ${{ needs.deploy-web-app.result || 'skipped' }}"
          echo "- API: ${{ needs.deploy-api.result || 'skipped' }}"

      - name: Notify team (optional)
        if: github.event.inputs.environment == 'production'
        run: |
          # يمكن إضافة إشعار Slack أو Teams هنا
          echo "🎉 Production deployment completed successfully!"

      - name: Create deployment summary
        run: |
          echo "## 📋 Deployment Summary" >> $GITHUB_STEP_SUMMARY
          echo "**Environment:** ${{ github.event.inputs.environment || 'staging' }}" >> $GITHUB_STEP_SUMMARY
          echo "**Commit:** ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
          echo "**Branch:** ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 🚀 Deployed Components:" >> $GITHUB_STEP_SUMMARY
          echo "- **Sheets Add-on:** ${{ needs.deploy-sheets-addon.result || 'skipped' }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Web App:** ${{ needs.deploy-web-app.result || 'skipped' }}" >> $GITHUB_STEP_SUMMARY
          echo "- **API:** ${{ needs.deploy-api.result || 'skipped' }}" >> $GITHUB_STEP_SUMMARY
>>>>>>> deb4a3cf5cdc5641ad76cc9bcaba03378099b6e0
