/**
 * ============================================================================
 * ملف: tools_dialogue.gs – AI_TOOLS_DIALOGUE (نسخة مغلفة ونهائية)
 * الوظيفة: وحدة التفاعل والذاكرة اللحظية للمساعد G-Assistant
 * - عرض الرسائل، تأكيد المستخدم، جداول تلخيصية
 * - إدارة سياق الجلسة (set/get) بمدة صلاحية اختيارية
 * - تكامل مباشر مع AI_MEMORY و AI_CORE و ENV
 * - كل الوظائف مغلّفة ضمن وحدة آمنة ومحمية
 * ============================================================================
 */

var AI_TOOLS_DIALOGUE = (function(ENV, AI_MEMORY, AI_CORE) {
  'use strict';

  const SETTINGS = ENV.SETTINGS;

  // ========== 1. رسائل التفاعل ==========

  function showMessage(level, text) {
    const emoji = {
      success: '✅', warning: '⚠️',
      error: '🚨', info: 'ℹ️'
    }[level] || '💬';
    return { type: 'message', level, text: `${emoji} ${text}` };
  }

  function showError(message) {
    AI_MEMORY.logOperation('AI_TOOLS_DIALOGUE::showError', 'error', { message });
    return showMessage('error', message);
  }

  function askUserConfirmation(message, confirmationType = 'normal', payload = {}) {
    AI_MEMORY.logOperation('AI_TOOLS_DIALOGUE::askUserConfirmation', 'prompt', { message });
    return {
      type: 'confirmation_required',
      action: '_internal_userConfirmed',
      params: { payload, confirmationType },
      message
    };
  }

  function showSummaryTable(jsonData) {
    AI_MEMORY.logOperation('AI_TOOLS_DIALOGUE::showSummaryTable', 'visual', {});
    try {
      const data = typeof jsonData === 'string' ? JSON.parse(jsonData) : jsonData;
      if (!Array.isArray(data) || data.length === 0) {
        return showMessage("info", "لا توجد بيانات لعرضها.");
      }
      const headers = Object.keys(data[0]);
      const widths = headers.map(h => h.length);

      data.forEach(row => {
        headers.forEach((h, i) => {
          const len = String(row[h] ?? '').length;
          if (len > widths[i]) widths[i] = len;
        });
      });

      const headerLine = headers.map((h, i) => h.padEnd(widths[i])).join(" │ ");
      const divider    = widths.map(w => "─".repeat(w)).join("─┼─");
      const bodyRows   = data.map(row =>
        headers.map((h, i) => String(row[h] ?? '').padEnd(widths[i])).join(" │ ")
      );

      return {
        type: 'summary',
        table: "```\n" + headerLine + "\n" + divider + "\n" + bodyRows.join("\n") + "\n```"
      };
    } catch (e) {
      return showError(`فشل عرض الجدول: ${e.message}`);
    }
  }

  // ========== 2. إدارة السياق اللحظي ==========

  function setContext(key, value) {
    const forbidden = ["token", "sessionid", "apikey", "password"];
    if (forbidden.includes(key.toLowerCase())) {
      return showMessage("warning", `⚠️ المفتاح \"${key}\" محجوز أمنيًا.`);
    }
    try {
      const ctx = AI_MEMORY.loadSessionContext();
      ctx[key] = {
        value: typeof value === 'object' ? JSON.stringify(value) : value,
        timestamp: Date.now()
      };
      AI_MEMORY.saveSessionContext(ctx);
      return showMessage("success", `✅ تم حفظ السياق: [${key}]`);
    } catch (e) {
      return showError(`فشل حفظ السياق: ${e.message}`);
    }
  }

  function getContext(key) {
    const ctx = AI_MEMORY.loadSessionContext();
    const entry = ctx[key];
    if (!entry) return showMessage("warning", `لا توجد قيمة محفوظة تحت المفتاح \"${key}\".`);

    if (entry.expiresAt && Date.now() > entry.expiresAt) {
      delete ctx[key];
      AI_MEMORY.saveSessionContext(ctx);
      return showMessage("warning", `⏱️ انتهت صلاحية المفتاح \"${key}\" وتم حذفه.`);
    }

    try {
      const parsed = JSON.parse(entry.value);
      return { type: "context_value", key, content: parsed };
    } catch {
      return { type: "context_value", key, content: entry.value };
    }
  }

  function rememberValue(key, value) { return setContext(key, value); }
  function recallValue(key) { return getContext(key); }

  function rememberFor(key, value, minutes) {
    const ctx = AI_MEMORY.loadSessionContext();
    ctx[key] = {
      value: typeof value === 'object' ? JSON.stringify(value) : value,
      timestamp: Date.now(),
      expiresAt: Date.now() + minutes * 60 * 1000
    };
    AI_MEMORY.saveSessionContext(ctx);
    return showMessage("success", `⏳ تم حفظ [${key}] لمدة ${minutes} دقيقة.`);
  }

  function clearSessionContext() {
    AI_MEMORY.saveSessionContext({});
    return showMessage("success", "🧠 تم مسح ذاكرة الجلسة بالكامل.");
  }

  function summarizeSession() {
    const ctx = AI_MEMORY.loadSessionContext();
    const keys = Object.keys(ctx);
    if (keys.length === 0) return showMessage("info", "🧠 لا توجد بيانات في ذاكرة الجلسة.");

    const lines = keys.map(k => {
      const entry = ctx[k];
      const expiry = entry.expiresAt ? ` (تنتهي في: ${new Date(entry.expiresAt).toLocaleTimeString()})` : '';
      return `- **${k}**${expiry}: \`${(entry.value + '').substring(0, 100)}\``;
    });

    return { type: "session_summary", content: `**ملخص ذاكرة الجلسة:**\n${lines.join("\n")}` };
  }

  // ========== 3. اقتراحات واسترجاع ==========

  function suggestNextActions(jsonSuggestions) {
    try {
      const arr = JSON.parse(jsonSuggestions);
      if (!Array.isArray(arr)) throw new Error("الاقتراحات يجب أن تكون مصفوفة.");
      return {
        type: 'suggestions',
        content: "🧭 ما الخطوة التالية؟",
        suggestions: arr
      };
    } catch (e) {
      return showError(`فشل تحليل الاقتراحات: ${e.message}`);
    }
  }

  function repeatLastPrompt() {
    const ctx = AI_MEMORY.loadSessionContext();
    const prompt = ctx.lastPrompt;
    const model  = ctx.lastModel || SETTINGS.DEFAULT_MODEL;
    if (!prompt) return showMessage("warning", "⏪ لا يوجد أمر سابق محفوظ.");
    return AI_CORE.ask(prompt, model);
  }

  // ========== 📦 التصدير ==========
  return {
    showMessage,
    showError,
    askUserConfirmation,
    showSummaryTable,
    setContext,
    getContext,
    clearSessionContext,
    rememberValue,
    recallValue,
    rememberFor,
    summarizeSession,
    suggestNextActions,
    repeatLastPrompt
  };

})(ENV, AI_MEMORY, AI_CORE);
