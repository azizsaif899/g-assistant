# 📘 AzizSys Engineering Playbook
**الإصدار**: 1.0  
**المحرر الفني**: عبدالعزيز  
**آخر تحديث**: 2025-07-27  

---

## 🧭 خارطة طريق الإصلاح التقني

### المرحلة 1: استعادة الأساس الهندسي
- [x] استعادة الملفات المفقودة: `Utils.js`, `Config.js`, `Code.js`, `Intro.js`
- [x] بناء الهيكل الهيكلي عبر `defineModule` و `Injector`
- [x] فك جميع التبعيات الدائرية قبل التنفيذ

### المرحلة 2: كسر الاقتران بـ GAS
- [ ] فصل استدعاءات `DriveApp`, `SpreadsheetApp` من الملفات بشكل مباشر
- [ ] اعتماد `InjectedServices` كبديل برمجي يمكن تمريره ديناميكيًا
- [ ] تطوير `IStorageProvider` يدعم التشغيل خارج GAS

### المرحلة 3: تثبيت نقطة التشغيل الموحدة
- [x] إنشاء `src/index.js` لتحميل التهيئة، وتحقن السياق والبيئة
- [x] تحويل الوحدات الحساسة لاستخدام `init()` بدلًا من التنفيذ التلقائي

### المرحلة 4: التوثيق والتشخيص
- [x] إعداد `jsdoc2md` لتوليد وثائق معيارية لكل وحدة
- [x] تشغيل `testModules()` + `health-check` قبل كل دفع للنشر

---

## 📐 المعايير الهندسية الثابتة

| البند             | المعيار المطلوب                                  |
|------------------|--------------------------------------------------|
| ترتيب الملفات     | `generatePushOrder.js` مع `.clasp.json`         |
| تسجيل الوحدات     | `module_manifest.json` كمصدر رسمي                |
| تصميم الوحدات     | `defineModule` + `Injector`                     |
| اختبار الوحدات     | كل وحدة تمر باختبار `isReady()`                 |
| التوثيق           | `@module`, `@description`, `@version`           |
| الاستيراد         | عبر Barrel Files داخل كل مجلد                   |
| التنفيذ           | بدون Top-Level معتمد على تبعية مباشرة           |
| التخزين           | حقن عبر واجهة مجردة (`IStorageProvider`)        |
| الاستدعاء         | Dispatcher حسب السياق وليس اسم الدالة           |

---

## 🔒 نصائح هندسية للوقاية من الأخطاء

1. لا تستدعِ وحدة دون التأكد من جهوزيتها → `ModuleVerifier.checkReady()`.
2. نفّذ كل وحدة بعد `init()` من `src/index.js`.
3. تجنب استخدام GAS APIs مباشرة داخل الوحدات.
4. استخدم `clasp` و VSCode بدلًا من بيئة GAS المباشرة.
5. لا تُعدّل `module_manifest.json` يدويًا دون تشغيل `dependency_report`.
6. وثّق كل دالة جديدة عبر JSDoc.
7. نفّذ `npm run health-check` قبل كل نشر أو دمج.

---

## 📦 مستودعات وملحقات المشاريع المتصلة

| المشروع              | الوظيفة                  | ملاحظات                                       |
|----------------------|--------------------------|------------------------------------------------|
| AzizSys-Core         | النظام الأساسي           | يحتوي على `Injector`, `Config`, `Dispatcher`   |
| AzizSys-AgentLayer   | الوكلاء الذكيون         | تحليل النوايا والتشغيل                        |
| AzizSys-DocsManager  | التوثيق والتحليل         | يعتمد على `JSDoc`, `health-check`             |
| AzizSys-Portability  | توافق خارجي              | يدير توافق Node.js عبر `gas_mocks.js`         |
| AzizSys-CI-CD        | النشر التلقائي           | GitHub Actions + `clasp push`                 |

---

## 🧱 تجزئة الوحدات وتبني src/ و ES6

- تم تقسيم الوحدات الكبيرة إلى ملفات ذات مسؤولية واحدة.
- انتقلنا إلى هيكل `src/` لتنظيم الأكواد حسب الوظيفة.
- استخدام ES6 Modules (`import`, `export`) سمح بـ:
  - فك التبعيات
  - اختبار مستقل لكل وحدة
  - دعم التشغيل خارج GAS
تم تقسيم الوحدات الكبيرة إلى ملفات ذات مسؤولية واحدة، وتم تنظيمها داخل هيكل `src/` لتحسين الوضوح.

**ملاحظة معمارية هامة:**
- **أثناء التطوير المحلي (Local Development):** يتم تشجيع استخدام ES6 Modules (`import`, `export`) داخل بيئة Node.js. هذا يتيح لنا الاستفادة من أدوات الاختبار الحديثة ويوفر تحليلًا ثابتًا أفضل للتبعيات.
- **أثناء النشر (Deployment):** بيئة Google Apps Script لا تدعم ES6 Modules مباشرة. لذلك، تتضمن عملية البناء (`npm run build`) خطوة لتحويل (transpiling) الكود من صيغة ES6 إلى صيغة `defineModule` المتوافقة مع بيئة GAS، والتي يعتمد عليها نظام `Injector` الخاص بنا.

هذا النهج الهجين يمنحنا أفضل ما في العالمين: مرونة وقوة ES6 أثناء التطوير، واستقرار وموثوقية نظام `defineModule` في بيئة الإنتاج.

### ⚠️ ملاحظة معمارية هامة حول ES6 و defineModule

- أثناء **التطوير المحلي**:
  - يُستخدم هيكل `src/` مع ES6 Modules (`import`, `export`) داخل بيئة Node.js.
  - يوفر هذا مرونة عالية، أدوات اختبار حديثة، وقدرة أفضل على فك التبعيات وتحليل النظام.
  
- أثناء **النشر إلى Google Apps Script**:
  - GAS لا تدعم ES6 Modules مباشرة.
  - يتم تحويل الكود إلى صيغة `defineModule` المتوافقة مع نظام `Injector` من خلال عملية البناء (`npm run build`).
  - يعتمد ذلك على ترتيب الملفات عبر `filePushOrder` وضبط `appsscript.json`.

🧩 هذا النهج يحقق التكامل بين:
- **قوة التطوير المعاصر (ES6)**  
- **موثوقية التنفيذ داخل GAS (defineModule)**  
- عبر جسر بناء واضح، مؤتمت ومنسق (`build.js`)



---

## 🔧 دليل المطورين لمشاريع G-Assistant

### 🧠 1. افهم السياق وليس فقط الكود
- كل وظيفة لها سبب تشغيلي ضمن السياق العام.
- راجع دائمًا الهدف النهائي للمشروع.

### 🧩 2. اعتمد بنية الاستقلالية (Decoupling)
| المعيار          | المطلوب     |
|------------------|-------------|
| Coupling         | منخفض جدًا  |
| Reusability      | عالية       |
| Injection        | ديناميكي    |
| Logging & Monitoring | دائم ومتكامل |

### 📦 3. لا تبدأ بـ "فكرتي"، ابدأ بـ "ما الذي يعمل؟"
- لا تهدم نظام مستقر، بل طوّره على الأساس الناضج.

### 🚦 4. اختبر التوافق دائمًا
- كل تعديل يجب أن يُختبر مع التهيئة والتبعيات.

### 🧪 5. راقب النقاط الحرجة
- استخدم `Telemetry.log()` لكل خطوة حرجة.
- أنشئ سجل أحداث ذكي لتتبع المشاكل.

### 📚 6. وثّق بشكل احترافي
```js
/**
 * @module AgentCFO
 * @description وكيل تنفيذي لإدارة الميزانية والتقارير.
 * @dependencies [Config, Reporting, Injector]
 */
لا تفقد ترويسة المفات

---

## 🧭 خارطة طريق تطوير مشروع G-Assistant

### 🎯 الرؤية والأهداف
نقل النظام إلى بنية هندسية متكاملة تحقق الاستقرار، قابلية الصيانة، وقابلية التوسع. تم ذلك عبر فصل الاهتمامات، تبني بنية الوكلاء، وأتمتة البناء والنشر.

### 🛠️ مراحل الإصلاح والاستقرار

1. **استعادة النواة الأساسية**
   - `00_utils.js`, `01_config.js` ← لاستعادة "محرك" النظام.
2. **إصلاح عملية البناء**
   - تحديث `PREPEND_FILES` داخل `build.js`.
3. **إصلاح الوحدات الموجودة**
   - مراجعة استدعاءات `defineModule` ومواءمتها مع `Injector`.
4. **استعادة الوظائف المتقدمة**
   - تفعيل `Telemetry`, `LongTermMemory`, `Security`.
5. **اختبار وتحقيق شامل**
   - `npm run build`, `clasp push --force`, اختبار `onOpen()`.

### 📐 منهجية G-Assistant للمستقبل

- 🔒 البناء يتم فقط عبر مجلد `dist`.
- 🧭 التبعيات موثقة ضمن `dependencyNameMap`.
- 🛡️ البرمجة الدفاعية إلزامية.
- ⚙️ كل إعداد يتم من خلال `01_config.js`.

### 🚀 تطويرات مستقبلية

- [ ] بنية اختبار لكل وحدة `*.test.js`
- [ ] CI/CD عبر GitHub Actions
- [ ] دمج `ESLint` في البناء

لاتنسى التروسية مثل 
/**
 * @file 01_config.js
 * @module System.Config
 * @version 21
 * @author عبدالعزيز
 * @description
 * وحدة إدارة إعدادات المشروع؛ تجمع Defaults مع Script Properties وتدعم Caching.
 * المراحل المعمارية المطبقة:
 *   • 1: defineModule وربط التبعيات
 *   • 3: Caching للأداء (CacheService)
 *   • 9: تسجيل DocsManager
 *  10: حفظ أحداث التحقق والتفريغ في LongTermMemory
 *  17: تسجيل مقاييس في Google Sheets
 */

**************************************************************************************
**************************************************************************************
**************************************************************************************
**************************************************************************************
**************************************************************************************






📋 خطة الإصلاح الشاملة والمعايير الهندسية لمشروع G-Assistant
🎯 القواعد الأساسية المُحدثة
المعايير الهندسية الثابتة
البند	المعيار المطلوب
ترتيب الملفات	build.js مع filePushOrder في .clasp.json
تسجيل الوحدات	module_manifest.json كمصدر رسمي
تصميم الوحدات	defineModule + Injector إلزامي
اختبار الوحدات	كل وحدة تمر باختبار isReady()
التوثيق	@file, @module, @description, @version, @author إلزامي
الترويسة	تبدأ وتنتهي بـ // --- START/END OF FILE ---
التبعيات	عبر dependencyNameMap في build.js
التخزين	حقن عبر واجهة مجردة
📊 المراحل التفصيلية المُحدثة
المرحلة 1: استعادة الأساس الهندسي ⏱️ (15 دقيقة)
1.1 استعادة الملفات الحرجة:
✅ 00_utils.js     → نظام defineModule + Injector + GAssistant namespace
✅ 01_config.js    → نظام الإعدادات المتقدم مع Caching
✅ 02_intro.js     → وحدة المقدمة والترحيب
✅ 99_Code.js      → نقطة دخول API و doGet/doPost

Copy
1.2 بناء الهيكل الهيكلي:
// تحديث build.js
const PREPEND_FILES = [
    '00_utils.js',      // ← نظام defineModule أولاً
    '01_config.js',     // ← الإعدادات ثانياً  
    '02_intro.js',      // ← المقدمة ثالثاً
    '90_System/05_Types.js'
];

const APPEND_FILES = [
    '10_ui/1_ui_entry.js',
    '90_System/02_EditorTriggers.js',
    '99_Code.js',       // ← نقطة دخول API
    '00_Initializer.js' // ← التهيئة الأخيرة
];

Copy
javascript
1.3 فك التبعيات الدائرية:
// في build.js - تحديث dependencyNameMap
const dependencyNameMap = {
    'Utils': 'System.Utils',
    'Config': 'System.Config', 
    'DocsManager': 'System.DocsManager',
    'Telemetry': 'System.Telemetry',
    'AI': 'System.AI',
    'LongTermMemory': 'System.AI.LongTermMemory',
    // إضافة جميع التبعيات المفقودة
};

Copy
javascript
المرحلة 2: كسر الاقتران بـ GAS ⏱️ (20 دقيقة)
2.1 فصل استدعاءات GAS:
// قبل: استدعاء مباشر
SpreadsheetApp.getActiveSheet()

// بعد: حقن الخدمة
defineModule('System.SomeModule', ({ Utils, InjectedServices }) => {
  const sheet = InjectedServices.getActiveSheet();
});

Copy
javascript
2.2 تطوير IStorageProvider:
// إنشاء واجهة مجردة للتخزين
defineModule('System.Storage.Provider', () => {
  return {
    get: (key) => PropertiesService.getScriptProperties().getProperty(key),
    set: (key, value) => PropertiesService.getScriptProperties().setProperty(key, value),
    // دعم بيئات أخرى مستقبلاً
  };
});

Copy
javascript
المرحلة 3: تثبيت نقطة التشغيل الموحدة ⏱️ (10 دقيقة)
3.1 تحديث src/index.js:
/**
 * @file src/index.js
 * @description نقطة الدخول الموحدة للنظام
 */
function initializeSystem() {
  // تهيئة السياق والبيئة
  // تحميل الوحدات بالترتيب الصحيح
  // تفعيل نظام المراقبة
}

Copy
javascript
3.2 تحويل الوحدات لاستخدام init():
defineModule('System.SomeModule', ({ Utils }) => {
  let isInitialized = false;
  
  function init() {
    if (isInitialized) return;
    // منطق التهيئة هنا
    isInitialized = true;
  }
  
  return { init, /* other functions */ };
});

Copy
javascript
المرحلة 4: التوثيق والتشخيص ⏱️ (15 دقيقة)
4.1 توحيد ترويسات الملفات:
/**
 * @file path/to/file.js
 * @module System.ModuleName
 * @version X.X
 * @author عبدالعزيز
 * @description
 * وصف مفصل للوحدة ووظيفتها
 * المراحل المعمارية المطبقة:
 *   • 1: defineModule وربط التبعيات
 *   • 3: Caching للأداء (إن وجد)
 *   • 9: تسجيل DocsManager
 *   • 10: حفظ أحداث في LongTermMemory
 *   • 17: تسجيل مقاييس في Google Sheets
 */

Copy
javascript
4.2 إعداد health-check:
// في كل وحدة
function isReady() {
  return {
    status: 'ready',
    dependencies: ['System.Utils', 'System.Config'],
    lastCheck: new Date()
  };
}

Copy
javascript
🔒 القواعد الهندسية الإلزامية
1. بنية الملفات:
📦 كل ملف يجب أن يحتوي على:
├── ترويسة كاملة مع @file, @module, @version, @author
├── defineModule مع التبعيات الصحيحة  
├── دوال مُصدرة واضحة
├── معالجة أخطاء شاملة
└── تعليقات نهاية الملف

Copy
2. نظام التبعيات:
// ✅ صحيح
defineModule('System.ModuleName', ({ Utils, Config }) => {
  // استخدام التبعيات المحقونة
});

// ❌ خطأ
function someFunction() {
  GAssistant.Utils.log(); // استدعاء مباشر
}

Copy
javascript
3. معالجة الأخطاء:
// ✅ إلزامي في كل دالة
function someFunction() {
  return Utils.executeSafely(() => {
    // منطق الدالة
  }, [], 'ModuleName.someFunction');
}

Copy
javascript
4. التوثيق:
// ✅ إلزامي لكل دالة عامة
/**
 * وصف الدالة
 * @param {type} param - وصف المعامل
 * @returns {type} وصف القيمة المُرجعة
 */

Copy
javascript
🚀 خطة التنفيذ النهائية
الخطوة 1: نسخ الملفات الأساسية
# نسخ من backup_old_project
cp backup_old_project/-azizsys5/00_utils.js ./
cp backup_old_project/-azizsys5/01_config.js ./  
cp backup_old_project/-azizsys5/02_intro.js ./
cp backup_old_project/-azizsys5/99_Code.js ./

Copy
bash
الخطوة 2: تحديث build.js
// إضافة الملفات الجديدة لقوائم البناء
// تحديث dependencyNameMap
// إضافة معالجة أخطاء محسنة

Copy
javascript
الخطوة 3: إصلاح جميع الوحدات
# فحص كل ملف .js للتأكد من:
# - وجود ترويسة كاملة
# - استخدام defineModule صحيح
# - معالجة أخطاء شاملة
# - توثيق كامل

Copy
bash
الخطوة 4: اختبار شامل
node build.js           # بناء المشروع
npm run health-check    # فحص الصحة
clasp push --force      # نشر للاختبار

Copy
bash
📊 النتائج المتوقعة
بعد التطبيق الكامل:
✅ نظام defineModule + Injector مستقر
✅ جميع الوحدات موثقة ومُختبرة
✅ نظام إعدادات متقدم مع Caching
✅ نظام مراقبة وتسجيل شامل
✅ بنية قابلة للتوسع والصيانة
✅ توافق كامل مع معايير الجودة