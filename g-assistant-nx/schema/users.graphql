# Users & Authentication Schema

enum UserRole {
  ADMIN
  MANAGER
  SALES_REP
  MARKETING
  VIEWER
}

enum UserStatus {
  ACTIVE
  INACTIVE
  PENDING
  SUSPENDED
}

enum PermissionType {
  READ
  WRITE
  DELETE
  ADMIN
}

enum ResourceType {
  CUSTOMERS
  LEADS
  CAMPAIGNS
  ANALYTICS
  USERS
  SETTINGS
}

type User {
  id: ID!
  email: String!
  name: String!
  avatar: String
  role: UserRole!
  status: UserStatus!
  lastLogin: DateTime
  createdAt: DateTime!
  updatedAt: DateTime!
  permissions: [Permission!]!
  profile: UserProfile
}

type UserProfile {
  id: ID!
  userId: ID!
  firstName: String
  lastName: String
  phone: String
  department: String
  title: String
  bio: String
  timezone: String
  language: String
  preferences: UserPreferences
}

type UserPreferences {
  theme: String
  notifications: NotificationSettings
  dashboard: DashboardSettings
}

type NotificationSettings {
  email: Boolean!
  push: Boolean!
  sms: Boolean!
  leadUpdates: Boolean!
  campaignAlerts: Boolean!
  systemAlerts: Boolean!
}

type DashboardSettings {
  defaultView: String
  widgets: [String!]!
  refreshInterval: Int
}

type Permission {
  id: ID!
  userId: ID!
  resource: ResourceType!
  permission: PermissionType!
  granted: Boolean!
  grantedBy: ID
  grantedAt: DateTime!
}

type Session {
  id: ID!
  userId: ID!
  token: String!
  expiresAt: DateTime!
  createdAt: DateTime!
  lastActivity: DateTime!
  ipAddress: String
  userAgent: String
}

input UserFilter {
  role: UserRole
  status: UserStatus
  department: String
  search: String
}

input CreateUserInput {
  email: String!
  name: String!
  role: UserRole!
  status: UserStatus
  profile: CreateUserProfileInput
}

input CreateUserProfileInput {
  firstName: String
  lastName: String
  phone: String
  department: String
  title: String
  bio: String
  timezone: String
  language: String
}

input UpdateUserInput {
  name: String
  role: UserRole
  status: UserStatus
  profile: UpdateUserProfileInput
}

input UpdateUserProfileInput {
  firstName: String
  lastName: String
  phone: String
  department: String
  title: String
  bio: String
  timezone: String
  language: String
  preferences: UpdateUserPreferencesInput
}

input UpdateUserPreferencesInput {
  theme: String
  notifications: UpdateNotificationSettingsInput
  dashboard: UpdateDashboardSettingsInput
}

input UpdateNotificationSettingsInput {
  email: Boolean
  push: Boolean
  sms: Boolean
  leadUpdates: Boolean
  campaignAlerts: Boolean
  systemAlerts: Boolean
}

input UpdateDashboardSettingsInput {
  defaultView: String
  widgets: [String!]
  refreshInterval: Int
}

input GrantPermissionInput {
  userId: ID!
  resource: ResourceType!
  permission: PermissionType!
}

type Query {
  users(filter: UserFilter, limit: Int, offset: Int): [User!]!
  user(id: ID!): User
  currentUser: User
  userPermissions(userId: ID!): [Permission!]!
  sessions(userId: ID): [Session!]!
}

type Mutation {
  createUser(input: CreateUserInput!): User!
  updateUser(id: ID!, input: UpdateUserInput!): User!
  deleteUser(id: ID!): Boolean!
  
  grantPermission(input: GrantPermissionInput!): Permission!
  revokePermission(userId: ID!, resource: ResourceType!, permission: PermissionType!): Boolean!
  
  updateUserPreferences(userId: ID!, preferences: UpdateUserPreferencesInput!): User!
  
  createSession(email: String!, password: String!): Session!
  refreshSession(token: String!): Session!
  revokeSession(sessionId: ID!): Boolean!
  revokeAllSessions(userId: ID!): Boolean!
}

type Subscription {
  userUpdated: User!
  userLoggedIn: User!
  userLoggedOut: User!
  permissionChanged: Permission!
}