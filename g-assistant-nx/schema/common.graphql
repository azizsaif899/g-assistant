# Common Types & Scalars

scalar DateTime
scalar JSON
scalar Upload

# Common Enums
enum SortOrder {
  ASC
  DESC
}

enum OperatorType {
  EQUALS
  NOT_EQUALS
  CONTAINS
  NOT_CONTAINS
  STARTS_WITH
  ENDS_WITH
  GREATER_THAN
  LESS_THAN
  GREATER_THAN_OR_EQUAL
  LESS_THAN_OR_EQUAL
  IN
  NOT_IN
  IS_NULL
  IS_NOT_NULL
}

# Common Input Types
input SortInput {
  field: String!
  order: SortOrder!
}

input PaginationInput {
  limit: Int
  offset: Int
}

input FilterInput {
  field: String!
  operator: OperatorType!
  value: String
  values: [String!]
}

# Common Response Types
type PaginationInfo {
  total: Int!
  limit: Int!
  offset: Int!
  hasNext: Boolean!
  hasPrevious: Boolean!
}

type SuccessResponse {
  success: Boolean!
  message: String
}

type ErrorResponse {
  error: Boolean!
  message: String!
  code: String
  details: JSON
}

# File Upload Types
type FileInfo {
  id: ID!
  filename: String!
  mimetype: String!
  size: Int!
  url: String!
  uploadedAt: DateTime!
  uploadedBy: ID!
}

input FileUploadInput {
  file: Upload!
  folder: String
  public: Boolean
}

# Address Types
type Address {
  id: ID!
  street: String
  city: String
  state: String
  country: String
  postalCode: String
  latitude: Float
  longitude: Float
}

input AddressInput {
  street: String
  city: String
  state: String
  country: String
  postalCode: String
  latitude: Float
  longitude: Float
}

# Contact Information
type ContactInfo {
  email: String
  phone: String
  website: String
  socialMedia: SocialMediaLinks
}

type SocialMediaLinks {
  facebook: String
  twitter: String
  linkedin: String
  instagram: String
}

input ContactInfoInput {
  email: String
  phone: String
  website: String
  socialMedia: SocialMediaLinksInput
}

input SocialMediaLinksInput {
  facebook: String
  twitter: String
  linkedin: String
  instagram: String
}

# Audit Fields
interface Auditable {
  createdAt: DateTime!
  updatedAt: DateTime!
  createdBy: ID
  updatedBy: ID
}

# Search Types
type SearchResult {
  id: ID!
  type: String!
  title: String!
  description: String
  url: String
  score: Float
  highlights: [String!]
}

input SearchInput {
  query: String!
  types: [String!]
  filters: [FilterInput!]
  sort: [SortInput!]
  pagination: PaginationInput
}

type SearchResponse {
  results: [SearchResult!]!
  total: Int!
  facets: [SearchFacet!]
  suggestions: [String!]
  pagination: PaginationInfo!
}

type SearchFacet {
  field: String!
  values: [SearchFacetValue!]!
}

type SearchFacetValue {
  value: String!
  count: Int!
  selected: Boolean!
}

# Notification Types
enum NotificationType {
  INFO
  SUCCESS
  WARNING
  ERROR
}

type Notification {
  id: ID!
  type: NotificationType!
  title: String!
  message: String!
  read: Boolean!
  createdAt: DateTime!
  userId: ID!
  metadata: JSON
}

input CreateNotificationInput {
  type: NotificationType!
  title: String!
  message: String!
  userId: ID!
  metadata: JSON
}

# System Health
type SystemHealth {
  status: String!
  version: String!
  uptime: Int!
  database: HealthCheck!
  cache: HealthCheck!
  storage: HealthCheck!
  external: [ExternalServiceHealth!]!
}

type HealthCheck {
  status: String!
  responseTime: Int
  lastCheck: DateTime!
  error: String
}

type ExternalServiceHealth {
  name: String!
  status: String!
  responseTime: Int
  lastCheck: DateTime!
  error: String
}

# Common Queries
type Query {
  health: SystemHealth!
  search(input: SearchInput!): SearchResponse!
  notifications(userId: ID!, unreadOnly: Boolean): [Notification!]!
  uploadFile(input: FileUploadInput!): FileInfo!
}

# Common Mutations
type Mutation {
  markNotificationAsRead(id: ID!): Notification!
  markAllNotificationsAsRead(userId: ID!): SuccessResponse!
  deleteNotification(id: ID!): SuccessResponse!
}

# Common Subscriptions
type Subscription {
  notificationAdded(userId: ID!): Notification!
  systemHealthUpdated: SystemHealth!
}