# Analytics & Reporting Schema

enum MetricType {
  REVENUE
  LEADS
  CUSTOMERS
  CAMPAIGNS
  CONVERSION_RATE
  ROI
  ENGAGEMENT
}

enum TimeFrame {
  HOUR
  DAY
  WEEK
  MONTH
  QUARTER
  YEAR
}

enum ChartType {
  LINE
  BAR
  PIE
  AREA
  SCATTER
  FUNNEL
}

type Metric {
  id: ID!
  name: String!
  type: MetricType!
  value: Float!
  previousValue: Float
  change: Float
  changePercent: Float
  unit: String
  timestamp: DateTime!
}

type TimeSeriesData {
  timestamp: DateTime!
  value: Float!
  label: String
}

type ChartData {
  id: ID!
  title: String!
  type: ChartType!
  data: [TimeSeriesData!]!
  metadata: ChartMetadata
}

type ChartMetadata {
  xAxisLabel: String
  yAxisLabel: String
  color: String
  description: String
}

type Report {
  id: ID!
  name: String!
  description: String
  type: String!
  parameters: ReportParameters
  data: ReportData!
  createdAt: DateTime!
  updatedAt: DateTime!
  createdBy: ID!
}

type ReportParameters {
  dateRange: DateRange
  filters: [ReportFilter!]
  groupBy: [String!]
  metrics: [MetricType!]!
}

type ReportFilter {
  field: String!
  operator: String!
  value: String!
}

type ReportData {
  summary: [Metric!]!
  charts: [ChartData!]!
  tables: [TableData!]!
}

type TableData {
  id: ID!
  title: String!
  headers: [String!]!
  rows: [[String!]!]!
  totalRows: Int!
}

type Dashboard {
  id: ID!
  name: String!
  description: String
  widgets: [Widget!]!
  layout: DashboardLayout
  isDefault: Boolean!
  createdAt: DateTime!
  updatedAt: DateTime!
  createdBy: ID!
}

type Widget {
  id: ID!
  title: String!
  type: String!
  size: WidgetSize!
  position: WidgetPosition!
  config: WidgetConfig!
  data: WidgetData
}

type WidgetSize {
  width: Int!
  height: Int!
}

type WidgetPosition {
  x: Int!
  y: Int!
}

type WidgetConfig {
  metric: MetricType
  timeFrame: TimeFrame
  chartType: ChartType
  filters: [ReportFilter!]
  refreshInterval: Int
}

type WidgetData {
  value: Float
  change: Float
  chart: ChartData
  table: TableData
  lastUpdated: DateTime!
}

type DashboardLayout {
  columns: Int!
  rows: Int!
  gap: Int
}

type AnalyticsOverview {
  totalRevenue: Float!
  totalCustomers: Int!
  totalLeads: Int!
  totalCampaigns: Int!
  conversionRate: Float!
  averageOrderValue: Float!
  customerLifetimeValue: Float!
  monthlyRecurringRevenue: Float!
  churnRate: Float!
  topMetrics: [Metric!]!
  recentActivity: [ActivityItem!]!
}

type ActivityItem {
  id: ID!
  type: String!
  description: String!
  timestamp: DateTime!
  userId: ID
  entityId: ID
  entityType: String
}

input AnalyticsFilter {
  dateRange: DateRange
  metrics: [MetricType!]
  groupBy: TimeFrame
  customerSegment: String
  campaignType: CampaignType
}

input CreateReportInput {
  name: String!
  description: String
  type: String!
  parameters: ReportParametersInput!
}

input ReportParametersInput {
  dateRange: DateRange!
  filters: [ReportFilterInput!]
  groupBy: [String!]
  metrics: [MetricType!]!
}

input ReportFilterInput {
  field: String!
  operator: String!
  value: String!
}

input CreateDashboardInput {
  name: String!
  description: String
  widgets: [CreateWidgetInput!]!
  layout: DashboardLayoutInput
  isDefault: Boolean
}

input CreateWidgetInput {
  title: String!
  type: String!
  size: WidgetSizeInput!
  position: WidgetPositionInput!
  config: WidgetConfigInput!
}

input WidgetSizeInput {
  width: Int!
  height: Int!
}

input WidgetPositionInput {
  x: Int!
  y: Int!
}

input WidgetConfigInput {
  metric: MetricType
  timeFrame: TimeFrame
  chartType: ChartType
  filters: [ReportFilterInput!]
  refreshInterval: Int
}

input DashboardLayoutInput {
  columns: Int!
  rows: Int!
  gap: Int
}

input UpdateDashboardInput {
  name: String
  description: String
  widgets: [UpdateWidgetInput!]
  layout: DashboardLayoutInput
  isDefault: Boolean
}

input UpdateWidgetInput {
  id: ID!
  title: String
  type: String
  size: WidgetSizeInput
  position: WidgetPositionInput
  config: WidgetConfigInput
}

type Query {
  analytics(filter: AnalyticsFilter): AnalyticsOverview!
  metrics(types: [MetricType!], timeFrame: TimeFrame): [Metric!]!
  chartData(metric: MetricType!, timeFrame: TimeFrame!, chartType: ChartType!): ChartData!
  
  reports(limit: Int, offset: Int): [Report!]!
  report(id: ID!): Report
  generateReport(parameters: ReportParametersInput!): Report!
  
  dashboards(limit: Int, offset: Int): [Dashboard!]!
  dashboard(id: ID!): Dashboard
  defaultDashboard: Dashboard
  
  recentActivity(limit: Int): [ActivityItem!]!
}

type Mutation {
  createReport(input: CreateReportInput!): Report!
  updateReport(id: ID!, input: CreateReportInput!): Report!
  deleteReport(id: ID!): Boolean!
  
  createDashboard(input: CreateDashboardInput!): Dashboard!
  updateDashboard(id: ID!, input: UpdateDashboardInput!): Dashboard!
  deleteDashboard(id: ID!): Boolean!
  setDefaultDashboard(id: ID!): Dashboard!
  
  refreshWidget(widgetId: ID!): Widget!
  refreshDashboard(dashboardId: ID!): Dashboard!
}

type Subscription {
  metricsUpdated: [Metric!]!
  dashboardUpdated(dashboardId: ID!): Dashboard!
  widgetUpdated(widgetId: ID!): Widget!
  newActivity: ActivityItem!
}