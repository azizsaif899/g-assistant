# G-Assistant Schema - Smart Agents for Google Sheets

enum AgentType {
  CFO
  ANALYST
  REVIEWER
  DEVELOPER
  GENERAL
}

enum TaskStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  FAILED
}

enum SheetType {
  FINANCE
  PERFORMANCE
  CODE_REVIEW
  ANALYTICS
  GENERAL
}

type Agent {
  id: ID!
  name: String!
  type: AgentType!
  description: String
  isActive: Boolean!
  capabilities: [String!]!
  tasks: [Task!]!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type Task {
  id: ID!
  agentId: ID!
  agent: Agent!
  type: String!
  description: String!
  status: TaskStatus!
  input: JSON
  output: JSON
  executedAt: DateTime
  completedAt: DateTime
  duration: Int
  error: String
  createdAt: DateTime!
}

type Sheet {
  id: ID!
  name: String!
  type: SheetType!
  spreadsheetId: String!
  range: String
  headers: [String!]!
  rows: [Row!]!
  lastSync: DateTime
  createdAt: DateTime!
  updatedAt: DateTime!
}

type Row {
  id: ID!
  sheetId: ID!
  sheet: Sheet!
  rowIndex: Int!
  data: JSON!
  # Financial data
  date: String
  revenue: Float
  expenses: Float
  profit: Float
  # Performance data
  metric: String
  value: Float
  target: Float
  # Code review data
  fileName: String
  issuesFound: Int
  severity: String
  status: String
  # General data
  notes: String
  tags: [String!]
  createdAt: DateTime!
  updatedAt: DateTime!
}

type FinancialSummary {
  totalRevenue: Float!
  totalExpenses: Float!
  totalProfit: Float!
  profitMargin: Float!
  period: String!
  trends: [TrendData!]!
}

type TrendData {
  period: String!
  value: Float!
  change: Float!
  changePercent: Float!
}

type PerformanceMetrics {
  averageScore: Float!
  totalTasks: Int!
  completedTasks: Int!
  successRate: Float!
  trends: [TrendData!]!
}

type CodeReviewSummary {
  totalFiles: Int!
  totalIssues: Int!
  criticalIssues: Int!
  resolvedIssues: Int!
  averageSeverity: Float!
  topIssues: [IssueType!]!
}

type IssueType {
  type: String!
  count: Int!
  severity: String!
}

input AgentFilter {
  type: AgentType
  isActive: Boolean
  capabilities: [String!]
}

input TaskFilter {
  agentId: ID
  agentType: AgentType
  status: TaskStatus
  dateRange: DateRange
}

input SheetFilter {
  type: SheetType
  name: String
  spreadsheetId: String
}

input CreateAgentInput {
  name: String!
  type: AgentType!
  description: String
  capabilities: [String!]!
}

input CreateTaskInput {
  agentId: ID!
  type: String!
  description: String!
  input: JSON
}

input UpdateTaskInput {
  status: TaskStatus
  output: JSON
  error: String
}

input CreateSheetInput {
  name: String!
  type: SheetType!
  spreadsheetId: String!
  range: String
  headers: [String!]!
}

input SyncSheetInput {
  sheetId: ID!
  data: [JSON!]!
}

type Query {
  # Agents
  agents(filter: AgentFilter, limit: Int, offset: Int): [Agent!]!
  agent(id: ID!): Agent
  agentByType(type: AgentType!): Agent
  
  # Tasks
  tasks(filter: TaskFilter, limit: Int, offset: Int): [Task!]!
  task(id: ID!): Task
  agentTasks(agentId: ID!, status: TaskStatus): [Task!]!
  
  # Sheets
  sheets(filter: SheetFilter, limit: Int, offset: Int): [Sheet!]!
  sheet(id: ID!): Sheet
  sheetByName(name: String!): Sheet
  
  # Analytics
  financialSummary(sheetId: ID!, period: String): FinancialSummary!
  performanceMetrics(agentId: ID, period: String): PerformanceMetrics!
  codeReviewSummary(sheetId: ID!, period: String): CodeReviewSummary!
  
  # Smart Queries for Agents
  cfoAnalysis(sheetId: ID!, period: String): FinancialSummary!
  analystReport(sheetId: ID!, metrics: [String!]): PerformanceMetrics!
  reviewerReport(sheetId: ID!, severity: String): CodeReviewSummary!
}

type Mutation {
  # Agents
  createAgent(input: CreateAgentInput!): Agent!
  updateAgent(id: ID!, input: CreateAgentInput!): Agent!
  deleteAgent(id: ID!): Boolean!
  activateAgent(id: ID!): Agent!
  deactivateAgent(id: ID!): Agent!
  
  # Tasks
  createTask(input: CreateTaskInput!): Task!
  updateTask(id: ID!, input: UpdateTaskInput!): Task!
  completeTask(id: ID!, output: JSON!): Task!
  failTask(id: ID!, error: String!): Task!
  
  # Sheets
  createSheet(input: CreateSheetInput!): Sheet!
  updateSheet(id: ID!, input: CreateSheetInput!): Sheet!
  deleteSheet(id: ID!): Boolean!
  syncSheet(input: SyncSheetInput!): Sheet!
  
  # Agent Actions
  executeCFOAnalysis(sheetId: ID!, period: String): Task!
  executeAnalystReport(sheetId: ID!, metrics: [String!]): Task!
  executeCodeReview(sheetId: ID!, files: [String!]): Task!
}

type Subscription {
  taskUpdated(agentId: ID): Task!
  sheetSynced(sheetId: ID!): Sheet!
  agentStatusChanged: Agent!
  newFinancialData(sheetId: ID!): Row!
}