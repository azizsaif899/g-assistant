# CRM Schema - Customer Relationship Management

enum CustomerStatus {
  ACTIVE
  INACTIVE
  PROSPECT
  CHURNED
}

enum LeadStage {
  NEW
  CONTACTED
  QUALIFIED
  PROPOSAL
  NEGOTIATION
  CLOSED_WON
  CLOSED_LOST
}

enum CampaignType {
  EMAIL
  SOCIAL_MEDIA
  PAID_ADS
  CONTENT_MARKETING
  WEBINAR
  EVENT
}

enum CampaignStatus {
  DRAFT
  ACTIVE
  PAUSED
  COMPLETED
  CANCELLED
}

type Customer {
  id: ID!
  name: String!
  email: String!
  phone: String
  company: String
  value: Float!
  status: CustomerStatus!
  createdAt: DateTime!
  updatedAt: DateTime!
  leads: [Lead!]!
  campaigns: [Campaign!]!
}

type Lead {
  id: ID!
  name: String!
  email: String!
  phone: String
  company: String
  score: Int!
  stage: LeadStage!
  expectedValue: Float
  source: String
  notes: String
  createdAt: DateTime!
  updatedAt: DateTime!
  customer: Customer
  campaign: Campaign
}

type Campaign {
  id: ID!
  name: String!
  description: String
  type: CampaignType!
  status: CampaignStatus!
  budget: Float!
  spent: Float
  roi: Float
  startDate: DateTime!
  endDate: DateTime
  createdAt: DateTime!
  updatedAt: DateTime!
  leads: [Lead!]!
  customers: [Customer!]!
}

input CustomerFilter {
  status: CustomerStatus
  minValue: Float
  maxValue: Float
  createdAfter: DateTime
  search: String
}

input LeadFilter {
  stage: LeadStage
  minScore: Int
  maxScore: Int
  source: String
  createdAfter: DateTime
  search: String
}

input CampaignFilter {
  type: CampaignType
  status: CampaignStatus
  minBudget: Float
  maxBudget: Float
  dateRange: DateRange
}

input DateRange {
  start: DateTime!
  end: DateTime!
}

type DashboardData {
  totalCustomers: Int!
  activeCustomers: Int!
  totalLeads: Int!
  qualifiedLeads: Int!
  totalCampaigns: Int!
  activeCampaigns: Int!
  totalRevenue: Float!
  monthlyRevenue: Float!
  conversionRate: Float!
  averageLeadScore: Float!
}

type Query {
  customers(filter: CustomerFilter, limit: Int, offset: Int): [Customer!]!
  customer(id: ID!): Customer
  leads(filter: LeadFilter, limit: Int, offset: Int): [Lead!]!
  lead(id: ID!): Lead
  campaigns(filter: CampaignFilter, limit: Int, offset: Int): [Campaign!]!
  campaign(id: ID!): Campaign
  dashboardData: DashboardData!
  searchAll(query: String!): SearchResults!
}

type SearchResults {
  customers: [Customer!]!
  leads: [Lead!]!
  campaigns: [Campaign!]!
}

input CreateCustomerInput {
  name: String!
  email: String!
  phone: String
  company: String
  value: Float!
  status: CustomerStatus!
}

input UpdateCustomerInput {
  name: String
  email: String
  phone: String
  company: String
  value: Float
  status: CustomerStatus
}

input CreateLeadInput {
  name: String!
  email: String!
  phone: String
  company: String
  score: Int!
  stage: LeadStage!
  expectedValue: Float
  source: String
  notes: String
  customerId: ID
  campaignId: ID
}

input UpdateLeadInput {
  name: String
  email: String
  phone: String
  company: String
  score: Int
  stage: LeadStage
  expectedValue: Float
  source: String
  notes: String
  customerId: ID
  campaignId: ID
}

input CreateCampaignInput {
  name: String!
  description: String
  type: CampaignType!
  status: CampaignStatus!
  budget: Float!
  startDate: DateTime!
  endDate: DateTime
}

input UpdateCampaignInput {
  name: String
  description: String
  type: CampaignType
  status: CampaignStatus
  budget: Float
  spent: Float
  startDate: DateTime
  endDate: DateTime
}

type Mutation {
  createCustomer(input: CreateCustomerInput!): Customer!
  updateCustomer(id: ID!, input: UpdateCustomerInput!): Customer!
  deleteCustomer(id: ID!): Boolean!
  
  createLead(input: CreateLeadInput!): Lead!
  updateLead(id: ID!, input: UpdateLeadInput!): Lead!
  deleteLead(id: ID!): Boolean!
  convertLeadToCustomer(leadId: ID!): Customer!
  
  createCampaign(input: CreateCampaignInput!): Campaign!
  updateCampaign(id: ID!, input: UpdateCampaignInput!): Campaign!
  deleteCampaign(id: ID!): Boolean!
}

type Subscription {
  customerUpdated: Customer!
  leadUpdated: Lead!
  campaignUpdated: Campaign!
  dashboardUpdated: DashboardData!
}